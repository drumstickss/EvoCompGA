# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18tFVHS2pDh-g9oRouOAKE-BtdNiTi2s3
"""

import numpy

#ga 
def fitness_of_pop(inputs, pop):     
    fitness = numpy.sum(pop*inputs, axis=1)
    return fitness



def select_pool(pop, fitness, num_parents):   
    parents = numpy.empty((num_parents, pop.shape[1]))
    for parent_num in range(num_parents):
        maxIndex = numpy.where(fitness == numpy.max(fitness))
        maxIndex = maxIndex[0][0]
        parents[parent_num, :] = pop[maxIndex, :]
        fitness[maxIndex] = -99999999999
    return parents



def crossover(parents, offspring_size):
    offspring = numpy.empty(offspring_size)   
    crossover_point = numpy.uint8(offspring_size[1]/2)

    for k in range(offspring_size[0]):       

        index1 = k%parents.shape[0]        
        index2 = (k+1)%parents.shape[0]       
        offspring[k, 0:crossover_point] = parents[index1, 0:crossover_point]        
        offspring[k, crossover_point:] = parents[index2, crossover_point:]
    return offspring



def mutation(offspring_crossover):    
    for index in range(offspring_crossover.shape[0]):        
        random_value = numpy.random.uniform(-1.0, 1.0, 1)
        offspring_crossover[index, 4] = offspring_crossover[index, 4] + random_value
    return offspring_crossover


#function 

inputs = [4,-2,1.4,5,-8,-3.1,]
num_weights = 6


sol_per_pop = 8
parentsNum = 4
pop_size = (sol_per_pop,num_weights) 

new_population = numpy.random.uniform(low=-4.0, high=4.0, size=pop_size)
print(new_population)

num_generations = 5

for generation in range(num_generations):
    print("Generation : ", generation)    
    fitness =fitness_of_pop(inputs, new_population)
    print("Fitness Score :", "\n" ,fitness)   
    parents =select_pool(new_population, fitness, 
                                      parentsNum)    
    offspring_crossover =crossover(parents,
                                       offspring_size=(pop_size[0]-parents.shape[0], num_weights))
    print("Crossover Score :", "\n" ,offspring_crossover)    
    offspring_mutation =mutation(offspring_crossover)
    print("Mutation Result :", "\n" ,offspring_mutation)    
    new_population[0:parents.shape[0], :] = parents
    new_population[parents.shape[0]:, :] = offspring_mutation   
    print("Best result : ", numpy.max(numpy.sum(new_population*inputs, axis=1)))


fitness =fitness_of_pop(inputs, new_population)
best_match_idx = numpy.where(fitness == numpy.max(fitness))

print("Best solution : ", new_population[best_match_idx, :])
print("Best solution fitness : ", fitness[best_match_idx])